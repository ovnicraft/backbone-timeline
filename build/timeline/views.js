// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function() {
    var PostEditorView, PostListView, PostView, TimelineView;
    PostView = (function(_super) {

      __extends(PostView, _super);

      function PostView() {
        return PostView.__super__.constructor.apply(this, arguments);
      }

      PostView.prototype.template = "#PostView";

      PostView.prototype.className = "PostView";

      PostView.prototype.tagName = "li";

      PostView.prototype.events = {
        "click .remove": "deletePost"
      };

      PostView.prototype.initialize = function() {
        if (app.session.isOwner(this.model.get("user").id)) {
          return this.bindTo(app.session.user, "change:profile_pic_url", this.render);
        }
      };

      PostView.prototype.serializeData = function() {
        return $.extend(this.model.toJSON(), {
          createdTime: this.model.getCreatedTime()
        });
      };

      PostView.prototype.deletePost = function() {
        var _this = this;
        return this.$el.slideUp(function() {
          return _this.model.destroy();
        });
      };

      PostView.prototype.onRender = function() {
        var time,
          _this = this;
        time = this.model.getCreatedTime();
        this.$el.find(".date").text(time.toString());
        return time.onChange = function(diff, remainingTime) {
          return _this.$el.find(".date").text(remainingTime.toString());
        };
      };

      return PostView;

    })(Backbone.Marionette.ItemView);
    PostEditorView = (function(_super) {

      __extends(PostEditorView, _super);

      function PostEditorView() {
        return PostEditorView.__super__.constructor.apply(this, arguments);
      }

      PostEditorView.prototype.template = "#PostEditorView";

      PostEditorView.prototype.className = "PostEditorView";

      PostEditorView.prototype.events = {
        "click .js-send": "sendPost",
        "charsleft textarea": "checkSubmitButton"
      };

      PostEditorView.prototype.sendPost = function(event) {
        var $data, data;
        $data = this.$(".js-data");
        if ($data.length) {
          data = $data.val() || $data.text();
          if (data) {
            this.collection.create({
              data: data,
              context: this.context
            }, {
              wait: true
            });
            return $data.val("").focus();
          }
        }
      };

      PostEditorView.prototype.checkSubmitButton = function(event, invalid) {
        return this.$el.find("button[type=submit]").prop("disabled", invalid);
      };

      PostEditorView.prototype.onRender = function() {
        return this.$el.find("textarea").characterCounter({
          maxlength: 140,
          target: this.$el.find("#character-count-holder")
        });
      };

      return PostEditorView;

    })(Backbone.Marionette.ItemView);
    PostListView = (function(_super) {

      __extends(PostListView, _super);

      function PostListView() {
        return PostListView.__super__.constructor.apply(this, arguments);
      }

      PostListView.prototype.tagName = "ul";

      PostListView.prototype.className = "PostListView post-list sidebar-list";

      PostListView.prototype.infiniteScroll = true;

      PostListView.prototype.itemView = PostView;

      PostListView.prototype.template = function() {};

      PostListView.prototype.initialize = function(options) {
        PostListView.__super__.initialize.call(this, options);
        return this.loadMoreConfig = {
          tagName: "li",
          loadMore: "Cargar m&aacute;s comentarios",
          loadingMore: "<img src=\"" + app.STATIC_URL + "img/loading-small.gif\" /> Cargando comentarios&hellip;"
        };
      };

      PostListView.prototype.appendHtml = function(collectionView, itemView, index) {
        if (index === 0) {
          return this.$el.prepend(itemView.$el);
        } else {
          return this.$el.find(">:eq(" + (index - 1) + ")").after(itemView.$el);
        }
      };

      PostListView.prototype.onItemAdded = function() {
        var _base;
        return typeof (_base = this.$el.show().prev(".alert")).remove === "function" ? _base.remove() : void 0;
      };

      PostListView.prototype.onRender = function() {
        var _base, _base1;
        if (this.collection.isFetching) {
          return this.$el.show().html("<li class=\"loading\"><img src=\"" + app.STATIC_URL + "img/loading-small.gif\" /></li>");
        }
        if (typeof (_base = this.$el.find("> .loading")).remove === "function") {
          _base.remove();
        }
        if (this.collection.length === 0) {
          return this.$el.hide().before('<div class="alert">Â¡S&eacute; el primero en comentar!</div>');
        } else {
          return typeof (_base1 = this.$el.prev(".alert")).remove === "function" ? _base1.remove() : void 0;
        }
      };

      return PostListView;

    })(Backbone.extensions.CollectionView);
    TimelineView = (function(_super) {

      __extends(TimelineView, _super);

      function TimelineView() {
        return TimelineView.__super__.constructor.apply(this, arguments);
      }

      TimelineView.prototype.template = "#TimelineView";

      TimelineView.prototype.className = "TimelineView";

      TimelineView.prototype.regions = {
        editor: ".editor",
        timeline: ".timeline"
      };

      TimelineView.prototype.onRender = function() {
        if (app.session.isActive()) {
          this.editor.show(new PostEditorView({
            context: this.options.context,
            collection: this.options.collection
          }));
        }
        return this.timeline.show(new PostListView({
          context: this.options.context,
          collection: this.options.collection
        }));
      };

      return TimelineView;

    })(Backbone.Marionette.Layout);
    return {
      PostView: PostView,
      PostListView: PostListView,
      PostEditorView: PostEditorView,
      TimelineView: TimelineView
    };
  });

}).call(this);
